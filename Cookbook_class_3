@staticmethod和@classmethod 和  @property
classmethod中可以调用类中定义的其他方法、类的属性，但staticmethod只能通过A.a调用类的属性，但无法通过在该函数内部调用A.foo2()@property
self指代的是类的对象，self.__class__才是类本身,cls一般作为@classmethod修饰后的函数的第一个参数表示类本身，
@staticmethod修饰后的函数不需要任何来自类或者对象的参数(self or cls)
ins，用来表示调用它的类实例
http://python.jobbole.com/81921/
class T():
  def A():
    print(self)
t=T()
t.A() = T.A(t)

##logging
https://www.cnblogs.com/darkpig/p/5924820.html
CRITICAL > ERROR > WARNING > INFO > DEBUG > NOTSET
import logging  
logging.debug('debug message')  
logging.info('info message')  
logging.warning('warning message')  
logging.error('error message')  
logging.critical('critical message') 
只显示了大于等于WARNING级别的日志
WARNING:root:warning message
ERROR:root:error message
CRITICAL:root:critical message
logging.basicConfig(level=logging.DEBUG,  
                    format='%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s',  
                    datefmt='%a, %d %b %Y %H:%M:%S',  
                    filename='/tmp/test.log',  
                    filemode='w') 
                
##
import difflib
seq = difflib.SequenceMatcher(lambda x: x in ' 我的雪', str1,str2)
import Levenshtein
